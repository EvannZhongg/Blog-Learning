<!-- Giscus 评论区挂载点 -->
<div id="giscus-container"></div>

<!-- Giscus 动态加载脚本：初始加载 + 明暗主题切换 -->
<script>
  function createGiscus(theme) {
    const giscusContainer = document.getElementById('giscus-container');
    if (!giscusContainer) return;

    // 清除旧的评论 iframe
    giscusContainer.innerHTML = '';

    const script = document.createElement('script');
    script.src = 'https://giscus.app/client.js';

        // 替换为你的 GitHub 仓库信息（格式：username/repo）
        script.setAttribute('data-repo', 'your-github-username/your-repo-name');

        // 替换为你的 repo-id 和 category-id（在 giscus.app 配置页面生成）
        script.setAttribute('data-repo-id', 'your-repo-id');
        script.setAttribute('data-category', 'your-category-name');
        script.setAttribute('data-category-id', 'your-category-id');

        // 其他常规推荐设置
        script.setAttribute('data-mapping', 'pathname');           // 用页面路径匹配评论帖
        script.setAttribute('data-strict', '0');                   // 若无匹配帖则创建新帖
        script.setAttribute('data-reactions-enabled', '1');        // 启用表情反应
        script.setAttribute('data-emit-metadata', '0');            // 不输出元数据
        script.setAttribute('data-input-position', 'top');         // 输入框在评论上方
        script.setAttribute('data-theme', theme);                  // 设置为 'light' 或 'dark'
        script.setAttribute('data-lang', 'zh-CN');                 // 中文界面
        script.setAttribute('crossorigin', 'anonymous');           // 跨域资源安全
        script.async = true;                                       // 异步加载


    giscusContainer.appendChild(script);
  }

  function getCurrentTheme() {
    return document.body.classList.contains('dark-theme') ? 'dark' : 'light';
  }

  document.addEventListener('DOMContentLoaded', () => {
    // 页面首次加载，根据当前主题挂载评论
    createGiscus(getCurrentTheme());

    // 监听按钮点击切换主题 → 重载评论区
    const buttons = [
      document.querySelector('.toggleBtn'),
      document.getElementById('mobile-toggle-theme')
    ];
    buttons.forEach(btn => {
      if (!btn) return;
      btn.addEventListener('click', () => {
        setTimeout(() => {
          createGiscus(getCurrentTheme());
        }, 400); // 稍作延迟，确保 class 切换完毕
      });
    });

    // 监听 body class 改变（保险方案）
    const observer = new MutationObserver(() => {
      createGiscus(getCurrentTheme());
    });
    observer.observe(document.body, { attributes: true, attributeFilter: ['class'] });
  });
</script>
